parent_classes:


  - class: AllegroFlare::Screens::Gameplay
    scope: public
    init_with: ''


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: assets_bitmap_bin
    type: AllegroFlare::BitmapBin
    init_with: '{}'
    constructor_arg: true

  - name: database
    type: AssetStudio::Database
    init_with: ''

  - name: sprite_sheet_atlas
    type: ALLEGRO_BITMAP*
    init_with: nullptr

  - name: sprite_sheet
    type: AllegroFlare::FrameAnimation::SpriteSheet*
    init_with: nullptr

  - name: game_configuration
    type: AssetStudio::GameConfigurations::Main*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: current_level_identifier
    type: std::string
    init_with: '"[unset-current_level]"'

  - name: current_level
    type: AssetStudio::Gameplay::Level*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"AssetStudio/Gameplay/Screen"'
    static: true
    constexpr: true


methods:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_model_bin
    guards: [ (!initialized) ]
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
    body: |
      this->model_bin = model_bin;
      return;
      return;


  - name: load_level_by_identifier
    virtual: true
    override: true
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    guards: [ game_configuration ]
    body: |
      // Destroy the current level
      if (current_level)
      {
         // TODO: Shutdown current level
         delete current_level;
      }

      // Load the new level
      AllegroFlare::Levels::Base *loaded_level = game_configuration->load_level_by_identifier(level_identifier);
      if (loaded_level)
      {
         // TODO: Consider how to have this level loading mechanism removed, specifically the dependency on the configuration
         // For now, confirm the type, and cast
         if (!loaded_level->is_type(AssetStudio::Gameplay::Level::TYPE))
         {
            throw std::runtime_error("Loaded level not of expected type");
         }
         current_level_identifier = level_identifier;
         current_level = static_cast<AssetStudio::Gameplay::Level*>(loaded_level);
      }
      return;
    body_dependency_symbols:
     - AssetStudio::GameConfigurations::Main
     - AssetStudio::Gameplay::Level


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      set_update_strategy(AllegroFlare::Screens::Base::UpdateStrategy::SEPARATE_UPDATE_AND_RENDER_FUNCS);

      load_database_from_csv();

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: build_n_frames
    type: std::vector<AllegroFlare::FrameAnimation::Frame>
    parameters:
      - name: num_frames
        type: uint32_t
        default_argument: 1
      - name: start_frame_num
        type: uint32_t
        default_argument: 0
      - name: each_frame_duration
        type: float
        default_argument: 0.08f
    guards: [ (num_frames > 1), (start_frame_num >= 0), (each_frame_duration >= 0.0001) ]
    body: |
      std::vector<AllegroFlare::FrameAnimation::Frame> result;
      for (uint32_t i=0; i<num_frames; i++)
      {
         result.push_back({ start_frame_num + i, each_frame_duration });
      }
      return result;


  - name: obtain_sprite_sheet
    type: AllegroFlare::FrameAnimation::SpriteSheet*
    parameters:
      - name: filename
        type: std::string
        default_argument: '"[unset-filename]"'
      - name: cell_width
        type: int
        default_argument: 16
      - name: cell_height
        type: int
        default_argument: 16
      - name: sprite_sheet_scale
        type: int
        default_argument: 2
    body: |
      // TODO: Guard after assets_bitmap_bin is initialized
      //static std::map<std::string, AllegroFlare::FrameAnimation::SpriteSheet*> sprite_sheets = {
      //};

      ALLEGRO_BITMAP* sprite_sheet_atlas = al_clone_bitmap(
            assets_bitmap_bin.auto_get(filename)
            //assets_bitmap_bin.auto_get("grotto_escape_pack/Base pack/graphics/player.png")
         );
      //AllegroFlare::FrameAnimation::SpriteSheet *sprite_sheet =
      AllegroFlare::FrameAnimation::SpriteSheet *result_sprite_sheet =
         new AllegroFlare::FrameAnimation::SpriteSheet(sprite_sheet_atlas, cell_width, cell_height, sprite_sheet_scale);

      al_destroy_bitmap(sprite_sheet_atlas);

      return result_sprite_sheet;


  - name: infer_asssets_folder_location
    type: std::string
    body: |
      AllegroFlare::SystemInfo system_info;
      //std::vector<std::string> expected_possible_hostnames = {
         //"DESKTOP-NC9M1BH",            // Mark's Windows Laptop
         //"Marks-13-MacBook-Pro.local", // Mark's Mac Laptop used as desktop
         //"Marks-Mac-mini.local",       // Mark's MacMini
         // Marks-MacBook-Pro.local      // Mark's primary laptop
      //};
      std::string hostname = system_info.get_hostname();

      if (hostname == "Marks-MacBook-Pro.local")
      {
         return "/Volumes/markoates/Assets/";
      }

      return "/Users/markoates/Assets/";
    body_dependency_symbols:
       - AllegroFlare::SystemInfo


  - name: load_database_from_csv
    body: |
      std::string assets_folder = infer_asssets_folder_location();
      std::string assets_csv_filename = "assets_db.csv";
      assets_bitmap_bin.set_full_path(assets_folder);

      AssetStudio::DatabaseCSVLoader loader;
      loader.set_assets_bitmap_bin(&assets_bitmap_bin);
      loader.set_csv_full_path(assets_folder + assets_csv_filename);
      loader.load();

      database.set_assets(loader.get_levels());

      // Initialize the animations
      for (auto &asset_record : database.get_assets())
      {
         auto &asset = asset_record.second;
         if (asset->animation) asset->animation->initialize();
      }

      return;
    body_dependency_symbols:
      - AssetStudio::DatabaseCSVLoader


  - name: load_database_and_build_assets
    body: |
      int asset_id = 0;
      std::string assets_folder = "/Users/markoates/Assets/";
      assets_bitmap_bin.set_full_path(assets_folder);

      //sprite_sheet_atlas = al_clone_bitmap(
            //assets_bitmap_bin.auto_get("grotto_escape_pack/Base pack/graphics/player.png")
         //);
      //AllegroFlare::FrameAnimation::SpriteSheet *sprite_sheet =
      //sprite_sheet =
         //new AllegroFlare::FrameAnimation::SpriteSheet(sprite_sheet_atlas, 16, 16, 2);
      //al_destroy_bitmap(atlas);

      /*
      database.set_assets({
         {
            "grotto_character",
            new AssetStudio::Asset(
               asset_id++,
               "grotto",
               "grotto character",
               new AllegroFlare::FrameAnimation::Animation(
                  obtain_sprite_sheet("grotto_escape_pack/Base pack/graphics/player.png"), //sprite_sheet,
                  "grotto_character",
                  {
                     { 0, 0.2 },
                     { 1, 0.2 },
                     { 2, 0.2 },
                  },
                  AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_PING_PONG
               )
            ),
         },
         {
            "grotto_jump",
            new AssetStudio::Asset(
               asset_id++,
               "grotto",
               "grotto jump",
               new AllegroFlare::FrameAnimation::Animation(
                  obtain_sprite_sheet("grotto_escape_pack/Base pack/graphics/player.png"), //sprite_sheet,
                  "grotto_jump",
                  {
                     { 4, 1.0 },
                  },
                  AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_PING_PONG
               )
            ),
         },
         {
            "explosion_h",
            new AssetStudio::Asset(
               asset_id++,
               "explosion_h",
               "a blow up",
               new AllegroFlare::FrameAnimation::Animation(
                  obtain_sprite_sheet("Explosions Pack 7 files/Spritesheet/explosion-h.png", 32, 32),
                  "explosion_h",
                  build_n_frames(9),
                  AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_ONCE
               )
            ),
         },
         {
            "explosion_e",
            new AssetStudio::Asset(
               asset_id++,
               "explosion_h",
               "a blow up",
               new AllegroFlare::FrameAnimation::Animation(
                  obtain_sprite_sheet("Explosions Pack 7 files/Spritesheet/explosion-e.png", 48, 48),
                  "explosion_h",
                  build_n_frames(9),
                  AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_ONCE
               )
            )
         },

            //obtain_sprite_sheet
         //Explosions Pack 7 files/Spritesheet/explosion-h.png


      });
      */

      // Initialize the animations
      for (auto &asset_record : database.get_assets())
      {
         auto &asset = asset_record.second;
         if (asset->animation) asset->animation->initialize();
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::BitmapBin
      - AllegroFlare::FrameAnimation::SpriteSheet


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: update
    body: |
      float time_now = al_get_time();
      // Run "update" on all animations
      for (auto &asset_record : database.get_assets())
      {
         auto &asset = asset_record.second;

         // Update the animation (if present)
         if (asset->animation)
         {
            asset->animation->update();
            if (asset->animation->get_playmode() == AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_ONCE)
            {
               if (asset->animation->get_finished())
               {
                  // Before resetting the animation, add some dealy so it is clear the animation playmode is not a loop
                  float age_since_finished = time_now -  asset->animation->get_finished_at();
                  if (age_since_finished >= 0.4f)
                  {
                     // Reset the animation to replay
                     asset->animation->reset();
                     asset->animation->start();
                  }
               }
            }
         }
      }
      return;


  - name: render
    body: |
      ALLEGRO_FONT *font = obtain_font();
      //al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 1920/2, 1080/2 - 30, ALLEGRO_ALIGN_CENTER, "Hello");

      float spacing_x = 300;
      float spacing_y = 340;
      int num_columns = 6;

      float x = 1920 / 2 - (spacing_x * (num_columns - 1)) / 2;
      float y = 200;

      int sprite_sheet_scale = 2;
      AllegroFlare::Placement2D asset_placement;
      AllegroFlare::Placement2D frame_placement;
      int asset_i = 0;
      ALLEGRO_COLOR ui_color = ALLEGRO_COLOR{0.1, 0.1, 0.143, 0.5};
      ALLEGRO_COLOR ui_color_light = ALLEGRO_COLOR{0.7, 0.7, 0.745, 1.0};
      ALLEGRO_COLOR ui_color_dark = ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.1};

      float scale_x = 2.0f;
      float scale_y = 2.0f;

      int column_num = 0;
      int row_num = 0;

      for (auto &asset_record : database.get_assets())
      {
         auto &asset = asset_record.second;
         if (asset->type == "tileset") continue; // Skip over tilesets

         row_num = asset_i / num_columns;
         column_num = asset_i % num_columns;
         float xx = x + (spacing_x * column_num);
         float yy = y + (spacing_y * row_num);
         frame_placement.position.x = xx;
         frame_placement.position.y = yy;
         frame_placement.size.x = 256;
         frame_placement.size.y = 256;

         frame_placement.start_transform();
         al_draw_filled_rectangle(0, 0, frame_placement.size.x, frame_placement.size.y, ui_color_dark);
         {
            asset_placement.position.x = frame_placement.size.x/2;
            asset_placement.position.y = frame_placement.size.y/2;
            asset_placement.size.x = asset->cell_width * sprite_sheet_scale;
            asset_placement.size.y = asset->cell_height * sprite_sheet_scale;
            asset_placement.scale.x = scale_x;
            asset_placement.scale.y = scale_x;

            asset_placement.start_transform();
            //al_draw_rectangle(0, 0, frame_placement.size.x, frame_placement.size.y, ui_color, 1.0);

            // Draw a frame rectangle indicating the dimensions of the asset
            al_draw_rectangle(0, 0, asset_placement.size.x, asset_placement.size.y, ui_color, 2.0);

            if (asset->animation)
            {
               if (asset->animation->get_finished())
               {
                  // If the animation is "finished", show a little placeholder circle indicating that the animation has 
                  // reached its end
                  al_draw_filled_circle(asset_placement.size.x/2, asset_placement.size.y/2, 6, ui_color);
               }
               else
               {
                  asset->animation->draw();
               }
            }
            else if (asset->bitmap)
            {
               //al_draw_circle(asset_placement.size.x/2, asset_placement.size.y/2, 6, ui_color, 2.0f);
               al_draw_bitmap(asset->bitmap, 0, 0, 0);
               //al_draw_bitmap(
            }
            else
            {
               al_draw_text(
                     font,
                     ui_color_light,
                     asset_placement.size.x * 0.5f,
                     asset_placement.size.y * 0.5f,
                     ALLEGRO_ALIGN_CENTER,
                     "preview not available"
                  );
            }

            asset_placement.restore_transform();

            // Draw info about the asset
            ALLEGRO_FONT *font = obtain_font_for_asset_identifier();

            // Draw asset identifier
            al_draw_text(font, ui_color_light, 0, frame_placement.size.y + 8, ALLEGRO_ALIGN_LEFT, asset->identifier.c_str());

            // Draw type
            al_draw_text(
                  font,
                  ui_color_light,
                  frame_placement.size.x,
                  frame_placement.size.y + 8,
                  ALLEGRO_ALIGN_RIGHT,
                  asset->type.c_str()
               );

            // Draw dimensions
            al_draw_textf(
                  font,
                  ui_color_light,
                  frame_placement.size.x,
                  frame_placement.size.y + 8 + 20,
                  ALLEGRO_ALIGN_RIGHT,
                  "%dx%d", asset->cell_width, asset->cell_height
               );

            //al_draw_rectangle(0, 0, frame_placement.size.x, frame_placement.size.y, ui_color, 1.0);
         }
         al_draw_rectangle(0, 0, frame_placement.size.x, frame_placement.size.y, ui_color, 1.0);
         frame_placement.restore_transform();


         //asset_placement.draw_box(al_color_name("dodgerblue"), false);

         asset_i++;
      }

      return;
    body_dependency_symbols:
      - al_color_name


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ game_event ]
    body: |
      // game_configuration->handle_game_event(game_event);
      return;


  - name: primary_update_func
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: double
        default_argument: 0.0f
      - name: delta_time
        type: double
        default_argument: 1.0f
    guards: [ initialized ]
    body: |
      // Update stuff here (take into account delta_time)
      update();
      return;


  - name: primary_render_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // Render stuff here
      render();
      return;



  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      using namespace AllegroFlare;
      //if (!is_processing_user_input()) return;

      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_RIGHT)
      {
         //player_velocity.x = 1;
         //chapter_select_element.rotate_carousel_right();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_LEFT)
      {
         //player_velocity.x = -1;
         //chapter_select_element.rotate_carousel_left();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_A
         || virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_MENU
         )
      {
         //select_menu_option();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_X)
      {
         //exit_screen();
      }
      //call_on_finished_callback_func(); // Consider technique to exit
      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: obtain_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -32");


  - name: obtain_font_for_asset_identifier
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -18");


dependencies:


  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: AssetStudio::Gameplay::Screen
    headers: [ AssetStudio/Gameplay/Screen.hpp ]
  - symbol: AssetStudio::GameConfigurations::Main
    headers: [ AssetStudio/GameConfigurations/Main.hpp ]
  - symbol: AssetStudio::Gameplay::Level
    headers: [ AssetStudio/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AssetStudio::Database
    headers: [ AssetStudio/Database.hpp ]
  - symbol: AllegroFlare::FrameAnimation::SpriteSheet
    headers: [ AllegroFlare/FrameAnimation/SpriteSheet.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::FrameAnimation::Frame
    headers: [ AllegroFlare/FrameAnimation/Frame.hpp ]
  - symbol: AssetStudio::DatabaseCSVLoader
    headers: [ AssetStudio/DatabaseCSVLoader.hpp ]
  - symbol: AllegroFlare::SystemInfo
    headers: [ AllegroFlare/SystemInfo.hpp ]


